#!/bin/bash

# Configuration happens via environment variables taken from the runtime environment,
# redirected input, or provided on the command line.  Short-form options override
# all but command line environment variables, and must preceed them.

Usage() {
  echo "Usage: $0 [options] [VAR=value] ... [< file]"
}

# Read configuration from stdin when redirected (e.g. $0 < config)
[[ ! -t 0 ]] && source /dev/stdin

# Process short-from options
while getopts ":c:p:s:" opt; do
  case $opt in
    c)
      SYNC_GATEWAY_CONFIG="$OPTARG"
      ;;
    p)
      SYNC_GATEWAY_ADMIN_PORT="$OPTARG"
      ;;
    s)
      SYNC_GATEWAY="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      Usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      Usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

# Override configuration based on supplied arguments
until [ -z "$1" ]
do
  [[ "$1" =~ ^[^=]+=[^=]+$ ]] || { echo Malformed argument "$1"; Usage; exit 1; }
  eval "$1" || { echo Failed processing argument "$1"; Usage; exit 1; }
  shift
done

# Use supplied parameters or try for sensible defaults
: ${SYNC_GATEWAY:=sync_gateway}
: ${SYNC_GATEWAY_CONFIG:=$(pwd)/sync-gateway-config.json}
: ${SYNC_GATEWAY_ADMIN_PORT:=":4985"}

export sg_config=$(<${SYNC_GATEWAY_CONFIG})
sg_config=${sg_config//\$\{COUCHBASE_SERVER_URL\}/${server_url}}
sync_gateway <(echo "${sg_config}")