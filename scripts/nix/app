#!/bin/bash

## Run the application server

# Configuration happens via environment variables taken from the runtime environment,
# redirected input, or provided on the command line.  Short-form options override
# all but command line environment variables, and must preceed them.

Usage() {
  echo "Usage: $0 [options] [VAR=value] ... [< file]"
}

# Read configuration piped to stdin (e.g. $0 < config)
[[ ! -t 0 ]] && source /dev/stdin

# Process short-form options
while getopts ":k:m:p:u:" opt; do
  case $opt in
    k)
      UA_APPLICATION_KEY="$OPTARG"
      ;;
    m)
      UA_APPLICATION_MASTER_SECRET="$OPTARG"
      ;;
    p)
      COUCHBASE_RBAC_PASSWORD="$OPTARG"
      ;;
    u)
      COUCHBASE_RBAC_USERNAME="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      Usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      Usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

# Override configuration based on supplied arguments
until [ -z "$1" ]
do
  [[ "$1" =~ ^[^=]+=[^=]+$ ]] || { echo Malformed argument "$1"; Usage; exit 1; }
  eval "$1" || { echo Failed processing argument "$1"; Usage; exit 1; }
  shift
done

# Use supplied parameters or try for sensible defaults
: ${COUCHBASE_RBAC_USERNAME:?Please supply a Couchbase RBAC username}
: ${COUCHBASE_RBAC_PASSWORD:?Please supply a Couchbase RBAC password}
: ${UA_APPLICATION_KEY:?Please supply an Urban Airship application key}
: ${UA_APPLICATION_MASTER_SECRET:?Please supply an Urban Airship master secret}

# Map to environment variables used in app
export CLUSTER="127.0.0.1:8091"
export CLUSTER_USER="${COUCHBASE_RBAC_USERNAME}"
export CLUSTER_PASSWORD="${COUCHBASE_RBAC_PASSWORD}"
export CLUSTER_CBAS=localhost:8095

npm start >& app.log &